Android内存泄漏终结
一.Java内存分配策略
Java程序运行时的内存分配策略有三种,分别是静态分配，栈式分配和堆式分配,
对应的,三种存储策略使用的内存空间主要分别是静态存储区（方法区）,栈区和堆区.
* 静态存储区（方法区):
主要存放静态数据,全局static数据和常量.
这块内存在程序编译时就已经分配好,并且在程序整个运行期间都存在.
*栈区:
当方法被执行时，方法体内的局部变量(其中包括基础数据类型，对象的引用)都在栈上创建，并在方法执行结束时这些局部变量所持有的内存将会自动
被释放.因为栈内存分配运算内置于处理器的指令集中,效率很高,但是分配的内存容量有限.
*堆区:
又称动态内存分配,通常就是指在程序运行时直接new出来的内存,
也就是对象的实例.这部分内存在不使用时将会由Java垃圾回收器来负责回收.
二.栈与堆的区别
在方法体内定义的(局部变量)一些基本类型的变量和对象的引用变量都是在方法的栈内存中分配的.
当在一段方法块中定义一个变量时,Java就会在栈中为该变量分配内存空间,当超过该变量的作用域后,该变量就无效了，
分配给他的的内存空间也将被释放掉，该内存空间可以被重新使用.
堆内存用来存放所有由new创建的对象(包括该对象其中的所有成员变量)和数组.
在堆中分配的内存,将由Java垃圾回收器来自动管理.在堆中产生了一个数组或者对象后,还可以在栈中定义一个特殊的变量,这个变量的取值等于数组或者对象
在堆内存中的首地址,这个特殊的变量就是我们上面说的引用变量.我们可以通过这个引用变量来访问堆中的对象或者数组.

结论:
局部变量的基本数据类型和引用存储于栈中,引用的对象实体存储于堆中.
因为他们属于方法中的变量,生命周期随方法而结束.
成员变量全部存储与堆中(包括基本数据类型,引用和引用的对象实体)
因为他们属于类,类对象终究是要被new出来使用的

三.Java是如何管理内存
Java的内存管理就是对象的分配和释放问题。
在Java中，程序员需要通过关键字 new 为每个对象申请内存空间 (基本类型除外)，所有的对象都在堆 (Heap)中分配空间。
另外，对象的释放是由 GC 决定和执行的。在 Java 中，内存的分配是由程序完成的，而内存的释放是由 GC 完成的，
这种收支两条线的方法确实简化了程序员的工作。
但同时，它也加重了JVM的工作。这也是 Java 程序运行速度较慢的原因之一。
因为，GC 为了能够正确释放对象，GC 必须监控每一个对象的运行状态，包括对象的申请、引用、被引用、赋值等，GC 都需要进行监控。
监视对象状态是为了更加准确地、及时地释放对象，而释放对象的根本原则就是该对象不再被引用。
为了更好理解 GC 的工作原理，我们可以将对象考虑为有向图的顶点，将引用关系考虑为图的有向边，有向边从引用者指向被引对象。
另外，每个线程对象可以作为一个图的起始顶点，例如大多程序从 main 进程开始执行
，那么该图就是以 main 进程顶点开始的一棵根树。在这个有向图中，根顶点可达的对象都是有效对象，GC将不回收这些对象。
如果某个对象 (连通子图)与这个根顶点不可达(注意，该图为有向图)，
那么我们认为这个(这些)对象不再被引用，可以被 GC 回收。
以下，我们举一个例子说明如何用有向图表示内存管理。对于程序的每一个时刻，我们都有一个有向图表示JVM的内存分配情况。
以下右图，就是左边程序运行到第6行的示意图。
Java使用有向图的方式进行内存管理，可以消除引用循环的问题，
例如有三个对象，相互引用，只要它们和根进程不可达的，那么GC也是可以回收它们的。
这种方式的优点是管理内存的精度很高，但是效率较低。另外一种常用的内存管理技术是使用计数器，
例如COM模型采用计数器方式管理构件，它与有向图相比，精度行低(很难处理循环引用的问题)，但执行效率很高。

四.什么是Java中的内存泄露
在Java中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点，
首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；
其次，这些对象是无用的，即程序以后不会再使用这些对象。
如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，
这些对象不会被GC所回收，然而它却占用内存。

详细Java中的内存泄漏
1.Java内存回收机制
不论哪种语言的内存分配方式，都需要返回所分配内存的真实地址，
也就是返回一个指针到内存块的首地址。
Java中对象是采用new或者反射的方法创建的，这些对象的创建都是在堆（Heap）中分配的，
所有对象的回收都是由Java虚拟机通过垃圾回收机制完成的。
GC为了能够正确释放对象，会监控每个对象的运行状况，
对他们的申请、引用、被引用、赋值等状况进行监控，
Java会使用有向图的方法进行管理内存，实时监控对象是否可以达到，
如果不可到达，则就将其回收，这样也可以消除引用循环的问题。
在Java语言中，判断一个内存空间是否符合垃圾收集标准有两个：
一个是给对象赋予了空值null，以下再没有调用过，
另一个是给对象赋予了新值，这样重新分配了内存空间
2.Java内存泄漏引起的原因
内存泄漏是指无用对象（不再使用的对象）持续占有内存或无用对象的内存得不到及时释放，从而造成内存空间的浪费称为内存泄漏。内存泄露有时不严重且不易察觉，这样开发者就不知道存在内存泄露
但有时也会很严重，会提示你Out of memory.
Java内存泄漏的根本原因是什么呢？
长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄漏，
尽管短生命周期对象已经不再需要，但是因为长生命周期持有它的引用而导致不能被回收，
这就是Java中内存泄漏的发生场景。具体主要有如下几大类：
2.1静态集合类引起内存泄漏：
像HashMap、Vector等的使用最容易出现内存泄露，
这些静态变量的生命周期和应用程序一致，
他们所引用的所有的对象Object也不能被释放，
因为他们也将一直被Vector等引用着。
Static Vector v = new Vector(10);
for (int i = 1; i<100; i++)
{
Object o = new Object();
v.add(o);
o = null;
}
在这个例子中，循环申请Object 对象，并将所申请的对象放入一个Vector 中，
如果仅仅释放引用本身（o=null），那么Vector 仍然引用该对象
，所以这个对象对GC 来说是不可回收的。
因此，如果对象加入到Vector 后，还必须从Vector 中删除
，最简单的方法就是将Vector对象设置为null。

2.2当集合里面的对象属性被修改后，再调用remove()方法时不起作用
public static void main(String[] args)
{
Set<Person> set = new HashSet<Person>();
Person p1 = new Person("唐僧","pwd1",25);
Person p2 = new Person("孙悟空","pwd2",26);
Person p3 = new Person("猪八戒","pwd3",27);
set.add(p1);
set.add(p2);
set.add(p3);
System.out.println("总共有:"+set.size()+" 个元素!"); //结果：总共有:3 个元素!
p3.setAge(2); //修改p3的年龄,此时p3元素对应的hashcode值发生改变

set.remove(p3); //此时remove不掉，造成内存泄漏

set.add(p3); //重新添加，居然添加成功
System.out.println("总共有:"+set.size()+" 个元素!"); //结果：总共有:4 个元素!
for (Person person : set)
{
System.out.println(person);
}
}
2.3监听器
在java 编程中，我们都需要和监听器打交道，
通常一个应用当中会用到很多监听器，
我们会调用一个控件的诸如addXXXListener()等方法来增加监听器，
但往往在释放对象的时候却没有记住去删除这些监听器，从而增加了内存泄漏的机会
2.4各种连接
比如数据库连接（dataSourse.getConnection()），
网络连接(socket)和io连接，除非其显式的调用了其close（）方法将其连接关闭，
否则是不会自动被GC 回收的。对于Resultset 和Statement 对象可以不进行显式回收，
但Connection 一定要显式回收，因为Connection 在任何时候都无法自动回收，
而Connection一旦回收，Resultset 和Statement 对象就会立即为NULL。
但是如果使用连接池，情况就不一样了，除了要显式地关闭连接，
还必须显式地关闭Resultset Statement 对象（关闭其中一个，另外一个也会关闭），
否则就会造成大量的Statement 对象无法释放，从而引起内存泄漏。
这种情况下一般都会在try里面去的连接，在finally里面释放连接。
2.5内部类和外部模块的引用
内部类的引用是比较容易遗忘的一种，而且一旦没释放可能导致一系列的后继类对象没有释放。
此外程序员还要小心外部模块不经意的引用，
例如程序员A 负责A 模块，调用了B 模块的一个方法如： public void registerMsg(Object b);
这种调用就要非常小心了，传入了一个对象，很可能模块B就保持了对该对象的引用，
这时候就需要注意模块B 是否提供相应的操作去除引用。
2.6单例模式
不正确使用单例模式是引起内存泄漏的一个常见问题，
单例对象在初始化后将在JVM的整个生命周期中存在（以静态变量的方式），
如果单例对象持有外部的引用，那么这个对象将不能被JVM正常回收，导致内存泄漏，考虑下面的例子
class A{
public A(){
B.getInstance().setA(this);
}
....
}
//B类采用单例模式
class B{
private A a;
private static B instance=new B();
public B(){}
public static B getInstance(){
return instance;
}
public void setA(A a){
this.a=a;
}
//getter...
}
显然B采用singleton模式，它持有一个A对象的引用，而这个A类的对象将不能被回收。
想象下如果A是个比较复杂的对象或者集合类型会发生什么情况

五.Android中常见的内存泄漏汇总
5.1集合类泄漏
集合类如果仅仅有添加元素的方法,而没有相应的删除机制,导致内存被占用.如果这个集合类是全局性的变量
(比如类中的静态属性,全局性的map等即有静态引用或final一直指向它),那么没有相应的删除机制，很可能导致集合所占用的内存只增不减
5.2单例造成的内存泄漏
由于单例的静态属性使得其生命周期跟应用的生命周期一样长,所以如果使用不恰当的话,很容易造成内存泄漏。
public class AppManager {
    private static AppManager instance;
    private Context context;
    private AppManager(Context context) {
        this.context = context;
    }

    public static AppManager getInstance(Context context) {
        if (instance == null) {
            instance = new AppManager(context);
        }
        return instance;
    }
}
这是一个普通的单例模式，当创建这个单例的时候，由于需要传入一个Context，
所以这个Context的生命周期的长短至关重要：
1、如果此时传入的是 Application 的 Context，
因为 Application 的生命周期就是整个应用的生命周期，所以这将没有任何问题。
2、如果此时传入的是 Activity 的 Context，当这个 Context 所对应的 Activity 退出时，
由于该 Context 的引用被单例对象所持有，其生命周期等于整个应用程序的生命周期，
所以当前 Activity 退出时它的内存并不会被回收，这就造成泄漏了。

正确的方式应该改为下面这种方式：

public class AppManager {
private static AppManager instance;
private Context context;
private AppManager(Context context) {
this.context = context.getApplicationContext();// 使用Application 的context
}
public static AppManager getInstance(Context context) {
if (instance == null) {
instance = new AppManager(context);
}
return instance;
}
}
或者这样写，连 Context 都不用传进来了：

在你的 Application 中添加一个静态方法，getContext() 返回 Application 的 context，

...

context = getApplicationContext();

...
   /**
     * 获取全局的context
     * @return 返回全局context对象
     */
    public static Context getContext(){
        return context;
    }

public class AppManager {
private static AppManager instance;
private Context context;
private AppManager() {
this.context = MyApplication.getContext();// 使用Application 的context
}
public static AppManager getInstance() {
if (instance == null) {
instance = new AppManager();
}
return instance;
}
}

5.3匿名内部类/非静态内部类和异步线程
非静态内部类创建静态实例造成的内存泄漏
5.4匿名内部类
android开发经常会继承实现Activity/Fragment/View，
此时如果你使用了匿名类，并被异步线程持有了
，那要小心了，如果没有任何措施这样一定会导致泄露
5.4Handler造成的内存泄漏
推荐使用静态内部类 + WeakReference 这种方式。每次使用前注意判空。
Java对引用的分类有 Strong reference, SoftReference, WeakReference, PhatomReference 四种。
在Android应用的开发中，为了防止内存溢出，
在处理一些占用内存大而且声明周期较长的对象时候，可以尽量应用软引用和弱引用技术。
软/弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。
利用这个队列可以得知被回收的软/弱引用的对象列表，从而为缓冲器清除已失效的软/弱引用。
5.5尽量避免使用static成员变量
如果成员变量被声明为 static，那我们都知道其生命周期将与整个app进程生命周期一样。
这会导致一系列问题，如果你的app进程设计上是长驻内存的，那即使app切到后台，这部分内存也不会被释放。按照现在手机app内存管理机制，占内存较大的后台进程将优先回收，yi'wei如果此app做过进程互保保活，那会造成app在后台频繁重启。当手机安装了你参与开发的app以后一夜时间手机被消耗空了电量、流量，你的app不得不被用户卸载或者静默。
这里修复的方法是：
不要在类初始时初始化静态成员。可以考虑lazy初始化。 架构设计上要思考是否真的有必要这样做，尽量避免。如果架构需要这么设计，那么此对象的生命周期你有责任管理起来。
5.6避免 override finalize()

   1、finalize 方法被执行的时间不确定，不能依赖与它来释放紧缺的资源。时间不确定的原因是： 虚拟机调用GC的时间不确定 Finalize daemon线程被调度到的时间不确定

   2、finalize 方法只会被执行一次，即使对象被复活，如果已经执行过了 finalize 方法，再次被 GC 时也不会再执行了，原因是：

   含有 finalize 方法的 object 是在 new 的时候由虚拟机生成了一个 finalize reference 在来引用到该Object的，而在 finalize 方法执行的时候，该 object 所对应的 finalize Reference 会被释放掉，即使在这个时候把该 object 复活(即用强引用引用住该 object )，再第二次被 GC 的时候由于没有了 finalize reference 与之对应，所以 finalize 方法不会再执行。

   3、含有Finalize方法的object需要至少经过两轮GC才有可能被释放。

5.7资源未关闭造成的内存泄漏

   对于使用了BraodcastReceiver，ContentObserver，File，游标 Cursor，Stream，Bitmap等资源的使用，应该在Activity销毁时及时关闭或者注销，否则这些资源将不会被回收，造成内存泄漏。

六.总结

  对 Activity 等组件的引用应该控制在 Activity 的生命周期之内； 如果不能就考虑使用 getApplicationContext 或者 getApplication，以避免 Activity 被外部长生命周期的对象引用而泄露。

  尽量不要在静态变量或者静态内部类中使用非静态外部成员变量（包括context )，即使要使用，也要考虑适时把外部成员变量置空；也可以在内部类中使用弱引用来引用外部类的变量。

  对于生命周期比Activity长的内部类对象，并且内部类中使用了外部类的成员变量，可以这样做避免内存泄漏：

      将内部类改为静态内部类
      静态内部类中使用弱引用来引用外部类的成员变量
  Handler 的持有的引用对象最好使用弱引用，资源释放时也可以清空 Handler 里面的消息。比如在 Activity onStop 或者 onDestroy 的时候，取消掉该 Handler 对象的 Message和 Runnable.

  在 Java 的实现过程中，也要考虑其对象释放，最好的方法是在不使用某对象时，显式地将此对象赋值为 null，比如使用完Bitmap 后先调用 recycle()，再赋为null,清空对图片等资源有直接引用或者间接引用的数组（使用 array.clear() ; array = null）等，最好遵循谁创建谁释放的原则。

  正确关闭资源，对于使用了BraodcastReceiver，ContentObserver，File，游标 Cursor，Stream，Bitmap等资源的使用，应该在Activity销毁时及时关闭或者注销。

  保持对对象生命周期的敏感，特别注意单例、静态对象、全局性集合等的生命周期。